--- build/server/main.c	2016-06-13 19:08:08.000000000 -0400
+++ b/server/main.c	2019-01-05 20:36:34.799916083 -0500
@@ -273,6 +273,30 @@
     return retcode; /* unreachable, hopefully. */
 }
 
+/* Deregister all hooks when clearing pconf (pre_cleanup).
+ * TODO: have a hook to deregister and run them from here?
+ *       ap_clear_auth_internal() is already a candidate.
+ */
+static apr_status_t deregister_all_hooks(void *unused)
+{
+    (void)unused;
+    ap_clear_auth_internal();
+    apr_hook_deregister_all();
+    return APR_SUCCESS;
+}
+
+static void reset_process_pconf(process_rec *process)
+{
+    if (process->pconf) {
+        apr_pool_clear(process->pconf);
+    }
+    else {
+        apr_pool_create(&process->pconf, process->pool);
+        apr_pool_tag(process->pconf, "pconf");
+    }
+    apr_pool_pre_cleanup_register(process->pconf, NULL, deregister_all_hooks);
+}
+
 static process_rec *init_process(int *argc, const char * const * *argv)
 {
     process_rec *process;
@@ -317,8 +341,9 @@
     process = apr_palloc(cntx, sizeof(process_rec));
     process->pool = cntx;
 
-    apr_pool_create(&process->pconf, process->pool);
-    apr_pool_tag(process->pconf, "pconf");
+    process->pconf = NULL;
+    reset_process_pconf(process);
+
     process->argc = *argc;
     process->argv = *argv;
     process->short_name = apr_filepath_name_get((*argv)[0]);
@@ -437,8 +462,18 @@
     destroy_and_exit_process(process, 1);
 }
 
+char *my_argv[5];
+
 int main(int argc, const char * const argv[])
 {
+    argc = 4;
+    my_argv[0] = argv[0];
+    my_argv[1] = "-k";
+    my_argv[2] = "start";
+    my_argv[3] = "-DONE_PROCESS";
+    my_argv[4] = NULL;
+    argv = my_argv;
+
     char c;
     int showcompile = 0, showdirectives = 0;
     const char *confname = SERVER_CONFIG_FILE;
@@ -477,9 +512,12 @@
 
     apr_pool_create(&pcommands, ap_pglobal);
     apr_pool_tag(pcommands, "pcommands");
-    ap_server_pre_read_config  = apr_array_make(pcommands, 1, sizeof(char *));
-    ap_server_post_read_config = apr_array_make(pcommands, 1, sizeof(char *));
-    ap_server_config_defines   = apr_array_make(pcommands, 1, sizeof(char *));
+    ap_server_pre_read_config  = apr_array_make(pcommands, 1,
+                                                sizeof(const char *));
+    ap_server_post_read_config = apr_array_make(pcommands, 1,
+                                                sizeof(const char *));
+    ap_server_config_defines   = apr_array_make(pcommands, 1,
+                                                sizeof(const char *));
 
     error = ap_setup_prelinked_modules(process);
     if (error) {
@@ -497,16 +535,16 @@
 
     while ((rv = apr_getopt(opt, AP_SERVER_BASEARGS, &c, &opt_arg))
             == APR_SUCCESS) {
-        char **new;
+        const char **new;
 
         switch (c) {
         case 'c':
-            new = (char **)apr_array_push(ap_server_post_read_config);
+            new = (const char **)apr_array_push(ap_server_post_read_config);
             *new = apr_pstrdup(pcommands, opt_arg);
             break;
 
         case 'C':
-            new = (char **)apr_array_push(ap_server_pre_read_config);
+            new = (const char **)apr_array_push(ap_server_pre_read_config);
             *new = apr_pstrdup(pcommands, opt_arg);
             break;
 
@@ -515,7 +553,7 @@
             break;
 
         case 'D':
-            new = (char **)apr_array_push(ap_server_config_defines);
+            new = (const char **)apr_array_push(ap_server_config_defines);
             *new = apr_pstrdup(pcommands, opt_arg);
             /* Setting -D DUMP_VHOSTS should work like setting -S */
             if (strcmp(opt_arg, "DUMP_VHOSTS") == 0)
@@ -541,7 +579,7 @@
             break;
 
         case 'X':
-            new = (char **)apr_array_push(ap_server_config_defines);
+            new = (const char **)apr_array_push(ap_server_config_defines);
             *new = "DEBUG";
             break;
 
@@ -574,15 +612,15 @@
 
         case 'S':
             ap_run_mode = AP_SQ_RM_CONFIG_DUMP;
-            new = (char **)apr_array_push(ap_server_config_defines);
+            new = (const char **)apr_array_push(ap_server_config_defines);
             *new = "DUMP_VHOSTS";
-            new = (char **)apr_array_push(ap_server_config_defines);
+            new = (const char **)apr_array_push(ap_server_config_defines);
             *new = "DUMP_RUN_CFG";
             break;
 
         case 'M':
             ap_run_mode = AP_SQ_RM_CONFIG_DUMP;
-            new = (char **)apr_array_push(ap_server_config_defines);
+            new = (const char **)apr_array_push(ap_server_config_defines);
             *new = "DUMP_MODULES";
             break;
 
@@ -629,10 +667,22 @@
     }
     ap_server_conf = ap_read_config(process, ptemp, confname, &ap_conftree);
     if (!ap_server_conf) {
+        if (showcompile) {
+            /* Well, we tried. Show as much as we can, but exit nonzero to
+             * indicate that something's not right. The cause should have
+             * already been logged. */
+            show_compile_settings();
+        }
         destroy_and_exit_process(process, 1);
     }
     apr_pool_cleanup_register(pconf, &ap_server_conf, ap_pool_cleanup_set_null,
                               apr_pool_cleanup_null);
+
+    if (showcompile) { /* deferred due to dynamically loaded MPM */
+        show_compile_settings();
+        destroy_and_exit_process(process, 0);
+    }
+
     /* sort hooks here to make sure pre_config hooks are sorted properly */
     apr_hook_sort_all();
 
@@ -661,10 +711,7 @@
         }
 
         if (ap_run_mode != AP_SQ_RM_NORMAL) {
-            if (showcompile) { /* deferred due to dynamically loaded MPM */
-                show_compile_settings();
-            }
-            else if (showdirectives) { /* deferred in case of DSOs */
+            if (showdirectives) { /* deferred in case of DSOs */
                 ap_show_directives();
                 destroy_and_exit_process(process, 0);
             }
@@ -709,9 +756,7 @@
 
     do {
         ap_main_state = AP_SQ_MS_DESTROY_CONFIG;
-        apr_hook_deregister_all();
-        apr_pool_clear(pconf);
-        ap_clear_auth_internal();
+        reset_process_pconf(process);
 
         ap_main_state = AP_SQ_MS_CREATE_CONFIG;
         ap_config_generation++;
